# Use C-a, since it's on the home row and easier to hit than C-b
# Also pressing C-b twice for backward scrolling in vim is tedious
set-option -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix

# Don't assign window index 0
set -g base-index 1

# Easy config reload
bind-key R source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."

# vi is good
set-window-option -g mode-keys vi

# Don't update e.g. DISPLAY, otherwise X11 integration stops working after
# SSH'ing into the session
set-option -g update-environment "SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY"

# Only rename manually
set -g allow-rename off

# mouse behavior
set -g mouse on
bind -T copy-mode-vi    C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-vi    C-WheelDownPane send-keys -X halfpage-down

bind-key space next-window
bind-key bspace previous-window
bind-key enter next-layout

# use vim-like keys for splits and windows
bind-key v split-window -h -c "#{pane_current_path}"
bind-key s split-window -v -c "#{pane_current_path}"
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# Move a pane to its own window, 
bind-key B break-pane
# Join windows: <prefix> S, <prefix> J
bind-key J command-prompt -p "join pane from:"  "join-pane -s '%%'"
bind-key S command-prompt -p "send pane to:"  "join-pane -t '%%'"

# rebind c to open the current path in the new window
bind-key c new-window -c "#{pane_current_path}"

# smart pane switching with awareness of vim splits
# -n means bind in the root table (-T root), which means these
# shortcuts apply without prefix
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-l) || tmux select-pane -R"
bind -n 'C-\' run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys 'C-\\') || tmux select-pane -l"
bind C-l send-keys 'C-l'

bind-key + select-layout main-horizontal
bind-key = select-layout main-vertical

bind-key a last-pane # l is already bound by pane movements
bind-key t next-window
bind-key T previous-window

# Setup 'v' to begin selection as in Vim
# -T specifies a tmux session
bind-key -Tcopy-mode-vi v send-keys -X begin-selection
bind-key -Tcopy-mode-vi y send-keys -X copy-pipe "xclip -in -selection clipboard"

# Update default binding of `Enter` to also use copy-pipe
# and immediately exit copy-mode after that
unbind -Tcopy-mode-vi Enter
bind-key -Tcopy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"

# Also use copy-pipe for mouse selection and dragging.
# Exit copy-mode immediately after that (default mouse behavior)
bind-key -Tcopy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"

# Double click -> copy word under cursor in normal and copy mode
bind-key -Tcopy-mode-vi DoubleClick1Pane \
  select-pane \; \
  send-keys -X select-word \; \
  send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
bind-key -n DoubleClick1Pane \
  select-pane \; \
  copy-mode -M \; \
  send-keys -X select-word \; \
  send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"

# Status Bar
set-option -g status-interval 1 # default is redraw every 15s

## Status Bar solarized-dark (default)
#set-option -g status-bg black
#set-option -g pane-active-border-fg yellow
#set-option -g pane-border-fg cyan
#
## Status Bar solarized-light
#if-shell "[ \"$COLORFGBG\" = \"11;15\" ]" "set-option -g status-bg white"
#if-shell "[ \"$COLORFGBG\" = \"11;15\" ]" "set-option -g pane-active-border-fg white"
#if-shell "[ \"$COLORFGBG\" = \"11;15\" ]" "set-option -g pane-border-fg white"

######################
### DESIGN CHANGES ###
######################

## Status bar design
# status line
set -g status-justify left
set -g status-bg default
set -g status-fg colour12
set -g status-interval 2

# window status
setw -g window-status-format " #F#I:#W#F "
setw -g window-status-current-format " #F#I:#W#F "
setw -g window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] #W "
setw -g window-status-current-format "#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] #W "

# Info on left (I don't have a session display for now)
set -g status-left ''

# loud or quiet?
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-option -g bell-action none

# Properly support keys like Pos1, End and Ctrl+Left
setw -g xterm-keys on
unbind C-Left
unbind C-Right

# The modes {
	setw -g clock-mode-colour colour135
# }
# The statusbar {

	set -g status-position bottom
	set -g status-bg colour234
	set -g status-fg colour137
	set -g status-left ''
	set -g status-right '#[fg=colour233,bg=colour239,bold] #h #[fg=colour233,bg=colour242,bold] %b %d #[fg=colour233,bg=colour245,bold] %H:%M '
	set -g status-right-length 50
	set -g status-left-length 20

	setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour255]#W#[fg=colour50]#F '

	setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '
# }
